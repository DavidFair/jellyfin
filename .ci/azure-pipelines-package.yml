jobs:
  - job: BuildPackage
    displayName: "Build Packages"

    strategy:
      matrix:
        # CentOS.amd64:
        #   BuildConfiguration: centos.amd64
        # Fedora.amd64:
        #   BuildConfiguration: fedora.amd64
        # Debian.amd64:
        #   BuildConfiguration: debian.amd64
        # Debian.arm64:
        #   BuildConfiguration: debian.arm64
        # Debian.armhf:
        #   BuildConfiguration: debian.armhf
        # Ubuntu.amd64:
        #   BuildConfiguration: ubuntu.amd64
        # Ubuntu.arm64:
        #   BuildConfiguration: ubuntu.arm64
        # Ubuntu.armhf:
        #   BuildConfiguration: ubuntu.armhf
        # Linux.amd64:
        #   BuildConfiguration: linux.amd64
        # Linux.amd64-musl:
        #   BuildConfiguration: linux.amd64-musl
        # Linux.arm64:
        #   BuildConfiguration: linux.arm64
        # Linux.musl-linux-arm64:
        #   BuildConfiguration: linux.musl-linux-arm64
        # Linux.armhf:
        #   BuildConfiguration: linux.armhf
        Windows.amd64:
          BuildConfiguration: windows.amd64
        # MacOS.amd64:
        #   BuildConfiguration: macos.amd64
        # MacOS.arm64:
        #   BuildConfiguration: macos.arm64
        # Portable:
        #   BuildConfiguration: portable

    pool:
      name: "Local"
      vmImage: "ubuntu-latest"

    steps:
      - script: echo "##vso[task.setvariable variable=JellyfinVersion]$( awk -F '/' '{ print $NF }' <<<'$(Build.SourceBranch)' | sed 's/^v//' )"
        displayName: Set release version (stable)
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')

      - script: 'docker build -f deployment/Dockerfile.$(BuildConfiguration) -t jellyfin-server-$(BuildConfiguration) --label "org.opencontainers.image.url=$(Build.Repository.Uri)" --label "org.opencontainers.image.revision=$(Build.SourceVersion)"  deployment'
        displayName: "Build Dockerfile"

      - script: 'docker image ls -a && docker run -v $(pwd)/deployment/dist:/dist -v $(pwd):/jellyfin -e IS_UNSTABLE="yes" -e BUILD_ID=$(Build.BuildNumber) jellyfin-server-$(BuildConfiguration)'
        displayName: "Run Dockerfile (unstable)"
        condition: startsWith(variables['Build.SourceBranch'], 'refs/heads/Proto_installer')

      - script: 'docker image ls -a && docker run -v $(pwd)/deployment/dist:/dist -v $(pwd):/jellyfin -e IS_UNSTABLE="no" -e BUILD_ID=$(Build.BuildNumber) jellyfin-server-$(BuildConfiguration)'
        displayName: "Run Dockerfile (stable)"
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/v')

      - task: PublishPipelineArtifact@1
        displayName: "Publish Release"
        inputs:
          targetPath: "$(Build.SourcesDirectory)/deployment/dist"
          artifactName: "jellyfin-server-$(BuildConfiguration)"
